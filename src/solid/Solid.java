package solid;

public class Solid {
    /*
        SOLID

        1.SRP(Single Responsibility Principle) - 단일 책임 원칙
        -> 클래스는 단 하나의 책임만 가져야 한다.
        ex) 유저 클래스(유저를 저장하는 클래스)
            알맞은 사용법 - 유저 이름 저장
            잘못된 사용법 - 유저 이름 저장, DB에 유저 이름을 저장
            -> 저장 로직과 DB에 저장 로직을 클래스로 쪼개서 사용해야 된다.

        2.OCP(Open-Closed Principle) - 개방-폐쇄 원칙
        -> 확장에는 열려있고, 변경에는 닫혀있어야 한다.
        ex) 인터페이스로 설계하고 클래스에서 재정의 하여 사용하여야 확장성이 좋아진다.
            그리고 데이터 변경에는 캡슐화로 감춰야 변경에 닫혀 있을수 있다.

        3.LSP(Liskov Substitution Principle) - 리스코프 치환 원칙
        -> 자식 클래스는 부모 클래스로 대체 가능해야 한다.

        4.ISP (Interface Segregation Principle) - 인터페이스 분리 원칙
        -> 클라이언트는 사용하지 않는 메서드에 의존하지 않아야 한다.
        ex) 프린터 기능, 스캔 기능, 팩스 기능이 있다가 가정할 떄,
            ISP는 프린터, 스캔, 팩스의 기능을 인터페이스로 각각 분리하라는 뜻이다.
            알맞은 사용법 - 프린터 기능 인터페이스, 스캔 기능 인터페이스, 팩스 기능 인터페이스
            잘못된 사용법 - 프린터 기능, 스캔 기능, 팩스 기능 인터페이스

        5.DIP (Dependency Inversion Principle) - 의존 역전 원칙
        -> 고수준 모듈은 저수준 모튤에 의존하면 안되며, 추상화에 의존해야 한다.
        ex) 의존 관계를 맺을 때 변화하기 쉬운 것에 의존하기보다는, 변화하지 않는 것에 의존하라는 원칙이다.
            쉽게 말하면, 확장하기 편하게 공통으로 묶어서 변화지 않게 설정하라는 것이다.
            예를 들어, 레거시 Spring 프로젝트에서 스프링 설정 파일을 설정할 떄,
            데이터 베이스는 root-context.xml에 공통으로 설정하는데, DIP는 이것을 뜻한다고 생각하면 된다.
    */
}
