package jvm;

public class Jvm {
    /*
        자바실행흐름
        1. .java 파일을 자바의 javac 프로그램을 실행하여 컴파일러를 진행한다.
        2. 컴파일러를 통해 .class 파일이 생성된다.
            - 자바 소스 코드 -> 바이트 코드 변환된다.(JVM에서 잘 작동하기위해 컴퓨터 언어로 변경)
            - 컴파일러 시 오류가 발생할 경우 컴파일러 에러가 발생한다.
        3. .class 파일을 자바의 java 프로그램을 통해 실행한다.
        4. JVM(자바가상머신)이 실행되면서 해당 자바 파일의 프로그램이 동작된다.

        JVM 동작 흐름
        1. 클래스 로더 시스템 : .class 파일을 메모리에 로드하고, .class 실행에 필요한 다른 클래스들도 함께 메모리에 로드한다.
        2. 실행 엔진 : 로드된 바이트 코드를 실행한다.
                     인터프리터는 바이트 코드를 한 줄씩 읽어 실행하고,
                     만약 같은 코드가 반복되면 JIT 컴파일러가 해당 부분을 기계어로 컴파일하여 직접 실행한다.
           - 인터프리터 : 소스 코드를 바로 실행하는 프로그램 및 환경
           - JIT 컴파일러 : 런타임 시 바이트 코드를 원시 시스템 코드로 컴파일하여 Java 어플리케이션의 성능을 향상시키는 런타임 환경의 컴포넌트이다.
        3. 런타임 데이터 영역 : JVM은 프로그램 실행에 필요한 메모리를 할당 받는다.
            - 메서드 영역 : 클래스 정보, 상수, static 변수 등이 저장된다.
                - 프로그램 실행 시 메모리에 한번 로딩된다.(로딩 된 정보들은 다른 곳에서 공유 목적으로 사용된다.)
                  -> static 키워드가 붙은 변수나 메서드가 객체 생성없이 사용할 수 있는 이유이다.
            - 힙 영역 : 객체와 배열이 생성되는 공간이다.
            - 스택 영역 : 메서드 호출 시 지역변수, 매개변수, 리턴 값 등이 저장된다.
                - 선입선출 : 먼저 실행 된 메서드가 먼저 종료가 된다. 마지막에 실행 된 메서드가 가장 마지막에 종료가 된다.
                - 후입선출 : 마지막에 실행 된 메서드가 가장 먼저 종료가 된다. 처음 실행 된 메서드가 마지막에 종료가 된다.
            - pc 레지스터 : 현재 실행 중인 명령의 주소를 저장한다.
            - 네이티브 메서드 스택 : 자바 외의 언어(C or C++)로 작성된 네이티브 코드를 위한 공간이다.
                                  -> JVM(자바가상머신)이 C,C++로 만들어졌기 때문에

        GC(가비지 컬렉터)
        프로그램 실행 중에 많은 객체가 힙 영역에 생성이 된다.
        이때, 가비지 컬렉터는 더 이상 참조되지 않는 객체를 찾아서 메모리에서 제거한다.
    */
}
