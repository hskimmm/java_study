package pattern;

public class DesignPattern {
    public static void main(String[] args) {
        /*
            싱글톤 패턴(Singleton Pattern)
            - 개념: 클래스의 인스턴스를 오직 하나만 생성하고, 어디에서든 해당 인스턴스에 접근할 수 있도록 하는 디자인 패턴입니다.
            - 장점:
                - 객체의 생성 비용이 높은 경우, 불필요한 객체 생성을 방지할 수 있습니다.
                - 전역적으로 접근 가능한 인스턴스를 제공하므로, 다른 클래스에서 쉽게 사용할 수 있습니다.
            - 단점:
                - 싱글톤 인스턴스가 너무 많은 책임을 가지게 되면, 단일 책임 원칙(SRP)을 위배할 수 있습니다.
                - 테스트하기 어려울 수 있으며, 인스턴스 간의 결합도가 높아질 수 있습니다.

            팩토리 메서드 패턴 (Factory Method Pattern)
            - 개념: 객체 생성 로직을 추상화하여 서브클래스에서 구체적인 객체 생성을 결정하도록 하는 디자인 패턴입니다.
            - 장점:
                - 객체 생성 로직을 클라이언트 코드에서 분리할 수 있어, 코드의 유지보수성을 높일 수 있습니다.
                - 새로운 객체 타입을 추가할 때, 기존 코드를 수정하지 않고 확장할 수 있습니다.
            - 단점:
                - 클래스 개수가 증가하여 코드 복잡도가 높아질 수 있습니다.
                - 객체 생성 로직이 복잡한 경우, 팩토리 클래스 자체가 복잡해질 수 있습니다.

            옵저버 패턴 (Observer Pattern)
            - 개념: 객체의 상태 변화를 관찰하는 관찰자(Observer)들을 등록하고, 상태 변화가 있을 때 자동으로 통지하는 디자인 패턴입니다.
            - 장점:
                - 객체 간의 느슨한 결합을 유지할 수 있어, 변경에 유연하게 대처할 수 있습니다.
                - 상태 변화를 관찰자들에게 자동으로 통지하므로, 일관성을 유지할 수 있습니다.
            - 단점:
                - 통지 순서에 의존하는 경우, 의도치 않은 결과가 발생할 수 있습니다.
                - 관찰자가 많아지면 통지에 따른 성능 저하가 발생할 수 있습니다.
        */
    }
}
